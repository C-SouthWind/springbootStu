Application 【36】-> SpringApplication.run(Application.class,args);
    SpringApplication 【1294】-> return run(new Class<?>[] { primarySource }, args);
        SpringApplication 【1305】-> return new SpringApplication(primarySources).run(args);
            SpringApplication 【1305】-> new SpringApplication(primarySources)
            # 加载各种配置信息，初始化各种配置对象
                SpringApplication 【253】-> this(null, primarySources);
                    SpringApplication 【267】-> public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
                        SpringApplication 【268】-> this.resourceLoader = resourceLoader;
                        # 初始化资源加载器
                        SpringApplication 【270】-> this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
                        # 初始化配置类的类名信息（格式转换）
                        SpringApplication 【271】-> this.webApplicationType = WebApplicationType.deduceFromClasspath();
                        # 确定当前容器加载的类型
                        SpringApplication 【272】-> this.bootstrapRegistryInitializers = new ArrayList<>(getSpringFactoriesInstances(BootstrapRegistryInitializer.class));
                        # 获取系统配置引导信息  getSpringFactoriesInstances()  通过spring工厂对外造对象的工作
                        SpringApplication 【273】-> setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
                        # 获得ApplicationContextInitializer对象的实例
                        SpringApplication 【274】-> setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
                        # 初始化监听器，对初始化过程及运行进行干预
                        SpringApplication 【275】-> this.mainApplicationClass = deduceMainApplicationClass();
                        # 初始化了引导类类名信息，备用

            SpringApplication 【1305】-> new SpringApplication(primarySources).run(args)
            # 初始化容器，得到ApplicationContext对象
                SpringApplication【298】 -> long startTime = System.nanoTime();
                # 设置开始时间，记录springboot启动时间
                SpringApplication【299】 -> 	DefaultBootstrapContext bootstrapContext = createBootstrapContext();
                # 系统引导信息对应的上下文对象
                SpringApplication【301】 -> 	configureHeadlessProperty();
                # 模拟输入信号，避免出现因缺少外设导致的信号传输失败，进而引发错误（模拟显示器，键盘，鼠标...）
                    java.awt.headless = true
                SpringApplication【302】 -> 	SpringApplicationRunListeners listeners = getRunListeners(args);
                # 获得当前注册的所有监听器
                SpringApplication【303】 -> 	listeners.starting(bootstrapContext, this.mainApplicationClass);
                # 监听器执行了对应的操作步骤 starting
                SpringApplication【305】 -> 	ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);
                # 将前期读取的数据加载成了一个环境对象，用来描述信息
                SpringApplication【306】 -> 	ConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments);
                # 做了一个配置，备用
                1SpringApplication【307】 -> Banner printedBanner = printBanner(environment);
                # 初始化logo  (banner、图标)
                SpringApplication【308】 -> 	context = createApplicationContext();
                # 创建容器对象，根据前期配置的容器类型进行判定并创建
                SpringApplication【309】 -> 	context.setApplicationStartup(this.applicationStartup);
                # 设置启动模式
                SpringApplication【310】 -> 	prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);
                # 对容器进行设置，参数来源于前期的设定
                SpringApplication【311】 -> 	refreshContext(context);
                # 刷新容器环境
                SpringApplication【312】 -> 	afterRefresh(context, applicationArguments);
                # 刷新完毕后做后处理
                SpringApplication【313】 -> 	Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);
                # 记时结束
                SpringApplication【315】 -> 	new StartupInfoLogger(this.mainApplicationClass).logStarted(getApplicationLog(), timeTakenToStartup);
                # 创建日志对应的对象，输出日志信息，包含启动时间
                SpringApplication【317】 -> 	listeners.started(context, timeTakenToStartup);
                # 监听器执行了对应的操作步骤 started
                SpringApplication【318】 -> 	callRunners(context, applicationArguments);
                # 调用可配置运行器
